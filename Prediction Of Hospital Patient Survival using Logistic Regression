# Hospital Patient Survival Prediction Project

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (
    accuracy_score, 
    confusion_matrix, 
    classification_report, 
    roc_curve, 
    roc_auc_score
)

# Load and prepare the dataset
class HospitalSurvivalPredictor:
    def __init__(self, data_path):
        """
        Initialize the predictor with dataset
        
        Parameters:
        -----------
        data_path : str
            Path to the CSV file containing hospital patient data
        """
        self.data = pd.read_csv(data_path)
        self.X = None
        self.y = None
        self.X_train = None
        self.X_test = None
        self.y_train = None
        self.y_test = None
        self.model = None
        
    def preprocess_data(self):
        """
        Preprocess the data:
        1. Handle missing values
        2. Encode categorical variables
        3. Scale numerical features
        """
        # Example preprocessing steps (adjust based on actual dataset)
        # Handle missing values
        self.data.fillna(self.data.median(), inplace=True)
        
        # Encode categorical variables (one-hot encoding)
        categorical_cols = self.data.select_dtypes(include=['object']).columns
        self.data = pd.get_dummies(self.data, columns=categorical_cols)
        
        # Separate features and target
        self.X = self.data.drop('survival', axis=1)
        self.y = self.data['survival']
        
        # Split the data
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(
            self.X, self.y, test_size=0.2, random_state=42
        )
        
        # Scale features
        scaler = StandardScaler()
        self.X_train = scaler.fit_transform(self.X_train)
        self.X_test = scaler.transform(self.X_test)
        
    def train_model(self):
        """
        Train Logistic Regression model
        """
        # Initialize and train the logistic regression model
        self.model = LogisticRegression(random_state=42)
        self.model.fit(self.X_train, self.y_train)
        
    def evaluate_model(self):
        """
        Evaluate the model performance
        """
        # Make predictions
        y_pred = self.model.predict(self.X_test)
        
        # Print evaluation metrics
        print("Model Evaluation Metrics:")
        print("Accuracy:", accuracy_score(self.y_test, y_pred))
        print("\nConfusion Matrix:")
        print(confusion_matrix(self.y_test, y_pred))
        print("\nClassification Report:")
        print(classification_report(self.y_test, y_pred))
        
    def plot_roc_curve(self):
        """
        Plot ROC Curve
        """
        # Compute ROC curve and ROC area
        y_pred_proba = self.model.predict_proba(self.X_test)[:, 1]
        fpr, tpr, _ = roc_curve(self.y_test, y_pred_proba)
        roc_auc = roc_auc_score(self.y_test, y_pred_proba)
        
        # Plot ROC curve
        plt.figure(figsize=(8, 6))
        plt.plot(fpr, tpr, color='darkorange', lw=2, 
                 label=f'ROC curve (AUC = {roc_auc:.2f})')
        plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.05])
        plt.xlabel('False Positive Rate')
        plt.ylabel('True Positive Rate')
        plt.title('Receiver Operating Characteristic (ROC) Curve')
        plt.legend(loc="lower right")
        plt.show()
        
    def feature_importance(self):
        """
        Analyze feature importances
        """
        # Get feature importances (coefficients)
        feature_importance = pd.DataFrame({
            'feature': self.X.columns,
            'importance': np.abs(self.model.coef_[0])
        }).sort_values('importance', ascending=False)
        
        # Plot feature importances
        plt.figure(figsize=(10, 6))
        sns.barplot(x='importance', y='feature', data=feature_importance.head(10))
        plt.title('Top 10 Most Important Features')
        plt.xlabel('Absolute Coefficient Value')
        plt.ylabel('Features')
        plt.tight_layout()
        plt.show()
        
    def run_analysis(self):
        """
        Run complete analysis pipeline
        """
        self.preprocess_data()
        self.train_model()
        self.evaluate_model()
        self.plot_roc_curve()
        self.feature_importance()

# Example usage
def main():
    # Replace 'hospital_data.csv' with your actual dataset path
    predictor = HospitalSurvivalPredictor('hospital_data.csv')
    predictor.run_analysis()

if __name__ == '__main__':
    main()

# Project Requirements (requirements.txt)
"""
numpy==1.21.0
pandas==1.3.0
matplotlib==3.4.2
seaborn==0.11.1
scikit-learn==0.24.2
"""

# README.md Content
"""
# Hospital Patient Survival Prediction

## Project Overview
This project implements a Logistic Regression model to predict patient survival based on hospital patient data.

## Setup
1. Clone the repository
2. Install dependencies: `pip install -r requirements.txt`
3. Prepare your dataset as 'hospital_data.csv'
4. Run the script: `python hospital_survival_prediction.py`

## Model Evaluation
- Accuracy Score
- Confusion Matrix
- Classification Report
- ROC Curve
- Feature Importance Analysis

## Dataset Requirements
- CSV file with patient features
- Include a 'survival' column (binary: 0 or 1)
"""
